services:
  # Flight Data Service - REST API for flight data
  flight-data-service:
    build:
      context: .
      dockerfile: ./backend/services/flight-data-service/Dockerfile
    ports:
      - "8084:8081"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8081
      - SERVICE_NAME=flight-data-service
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    depends_on: []
    networks:
      - flight-tracker
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8081/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # WebSocket Service - Real-time broadcasting
  websocket-service:
    build:
      context: .
      dockerfile: ./backend/services/websocket-service/Dockerfile
    ports:
      - "8082:8082"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8082
      - SERVICE_NAME=websocket-service
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - flight-tracker
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8082/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway - Request routing and rate limiting
  api-gateway:
    build:
      context: .
      dockerfile: ./backend/services/api-gateway/Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8080
      - FLIGHT_DATA_SERVICE_URL=http://flight-data-service:8081
      - WEBSOCKET_SERVICE_URL=http://websocket-service:8082
      - SERVICE_NAME=api-gateway
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    depends_on:
      flight-data-service:
        condition: service_healthy
      websocket-service:
        condition: service_healthy
    networks:
      - flight-tracker
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Mock Data Service - For testing without external API
  mock-data-service:
    build:
      context: .
      dockerfile: ./backend/services/mock-data-service/Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - ./backend/.env
    environment:
      - PORT=8083
      - SERVICE_NAME=mock-data-service
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8083/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    network_mode: host
    profiles:
      - testing

  # Frontend - Next.js React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://localhost:8080/ws
      - NODE_ENV=development
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - flight-tracker
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

networks:
  flight-tracker:
    driver: bridge
    name: flight-tracker-network

# Volumes for development
volumes:
  node_modules:
    driver: local
