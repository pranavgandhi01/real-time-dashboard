+-----------------+      +------------------------------+      +---------------------+
|                 |      |                              |      |                     |
|  OpenSky API    | <----| Go Backend (Fetcher Service) |----->|  Kafka Cluster      |
|                 |      |  (Producer)                  |      |  (Topic: flights)   |
+-----------------+      +------------------------------+      +---------------------+
                                                                       ^      |
                                                                       |      |
                                                                       |      v
                                       +----------------------------------+   +----------------------------------+
                                       | Go Backend (WebSocket Service 1) |   | Go Backend (WebSocket Service N) |
                                       |   (Kafka Consumer + WebSocket    |   |   (Kafka Consumer + WebSocket    |
                                       |    Hub)                          |<--|    Hub)                          |
                                       +----------------------------------+   +----------------------------------+
                                         |                                  |
                                         | (WebSocket)                      | (WebSocket)
                                         v                                  v
                               +-----------------+                +-----------------+
                               | Next.js Frontend|                | Next.js Frontend|
                               | (Client 1)      |                | (Client N)      |
                               +-----------------+                +-----------------+


Key Components in the New Architecture:

OpenSky API: Remains the external data source.
Go Backend (Fetcher Service):
This service is responsible only for fetching data from the OpenSky API.
It acts as a Kafka Producer, publishing the fetched FlightData messages to a designated Kafka topic (e.g., flights).
Kafka Cluster:
A distributed, fault-tolerant message broker.
The flights topic will store the real-time flight data stream.
Go Backend (WebSocket Service instances):
You can run multiple instances of this service.
Each instance acts as a Kafka Consumer, subscribing to the flights topic.
Upon receiving a message from Kafka, each WebSocket Service instance broadcasts that FlightData to its locally connected WebSocket clients.
The in-memory WebSocket Hub now receives its data from Kafka, not directly from the fetcher.
Next.js Frontend:
Connects to any available WebSocket Service instance (typically via a load balancer).
Consumes the flight data as before.